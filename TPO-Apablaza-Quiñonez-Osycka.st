SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!BotonAccion methodsFor: 'initialization' stamp: 'Liam 8/27/2018 13:51'!initializesuper initialize.self color:Color red.! !!BotonAccion methodsFor: 'initialization' stamp: 'Fede 9/1/2018 19:24'!mouseAction:unBloquebloqueAccion:=unBloque.! !!BotonAccion methodsFor: 'event handling' stamp: 'Liam 8/27/2018 13:52'!mouseUp:unEventosuper mouseUp:unEvento.bloqueAccion value.! !Object subclass: #Civilizacion	instanceVariableNames: 'nombre colRegiones colRegPorConquistar dinero miTurno'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civilizacion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colRegPorConquistar:		<Object>	colRegiones:		<Object>	dinero:		<Object>	nombre:		<Object>    Implementation Points!!Civilizacion methodsFor: 'Inicializador' stamp: 'fede 8/31/2018 15:27'!inicializarCivilizacion:unNombre dinero:unDineronombre:=unNombre.dinero:=unDinero.miTurno := false.colRegPorConquistar:=OrderedCollection new.colRegiones :=OrderedCollection new.! !!Civilizacion methodsFor: 'Metodos' stamp: 'fede 8/31/2018 14:21'!actualizarTurno: condmiTurno := cond.! !!Civilizacion methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 20:30'!getNombre^nombre.! !!Civilizacion methodsFor: 'Metodos' stamp: 'fede 8/31/2018 14:20'!setMiTurno: condmiTurno := cond.! !!Civilizacion methodsFor: 'Metodos' stamp: 'fede 8/31/2018 14:20'!getMiTurno^miTurno.! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 17:18'!getDinero^dinero .! !!Civilizacion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:41'!turnoActualcolRegiones do:[:cadaReg|cadaReg comienzoTurno.dinero:=dinero+(cadaReg otorgarDinero ) ].colRegPorConquistar do:[:cadaRegPorConquistar|(cadaRegPorConquistar verifConstrucEdif ).									((cadaRegPorConquistar getColEdificios) isNotEmpty) ifTrue:[colRegiones add:cadaRegPorConquistar .colRegPorConquistar remove:cadaRegPorConquistar .]].									! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 17:01'!agregarRegion:unaRegioncolRegiones add:unaRegion .! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/16/2018 23:33'!disminuirDinero:unMontodinero :=dinero-unMonto.! !!Civilizacion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:40'!getColRegPorConquistar^colRegPorConquistar .! !!Civilizacion methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:58'!getColRegiones^colRegiones .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civilizacion class	instanceVariableNames: ''!!Civilizacion class methodsFor: 'Constructor' stamp: 'LiamO 8/8/2018 17:15'!crearCivilizacion:unNombre dinero:unDinero|unaCivilizacion|unaCivilizacion:=self new.unaCivilizacion inicializarCivilizacion: unNombre dinero:unDinero. ^unaCivilizacion ! !Object subclass: #Edificio	instanceVariableNames: 'coste tiempo cuentaTiempo vida contadorTurno procesoConstruccion tiempoConstruccion edifListo'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Edificio commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contadorTurno:		<Object>	coste:		<Object>	cuentaTiempo:		<Object>	poder:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:52'!capacita^false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 21:52'!getProceso^procesoConstruccion .! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:16'!esFabrica^false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:34'!verifConstrucciones|finalizada|(procesoConstruccion )ifTrue:[finalizada :=self verifConstruccion].^finalizada.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:51'!verifCreacionCiviles^nil.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:00'!inicializarEdificio: unCoste tiempo:unTiempo cuentaTiempo:unCuenta vida:unaVida  contadorTurno:unContTurnocoste:=unCoste.tiempo:=unTiempo.cuentaTiempo:=unCuenta.vida:=unaVida.contadorTurno:=unContTurno.procesoConstruccion :=false.edifListo:=false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:06'!esCasa^false.! !!Edificio methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:33'!verifDinero:dineroCivilizacion^(dineroCivilizacion ==coste)! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:16'!esFabricaM^false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 21:53'!esAeropuerto^false.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:02'!edifFinalizado^edifListo.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:52'!listo^listo.! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:39'!verifTiempo|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true.listo:=true.]ifFalse:[cuentaTiempo:=cuentaTiempo+1].^construccion. ! !!Edificio methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:01'!verifTiempoEdif|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true.edifListo:=true.]ifFalse:[cuentaTiempo:=cuentaTiempo+1].^construccion. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Edificio class	instanceVariableNames: ''!!Edificio class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:39'!crearEdificio:unCoste tiempo:unTiempo cuentaTiempo:unCuentaTiempo vida:unaVida contadorTurno:unContadorTurno|unEdificio|unEdificio:= self new.unEdificio inicializarEdificio: unCoste tiempo:unTiempo  cuentaTiempo:unCuentaTiempo  vida:unaVida  contadorTurno: unContadorTurno.^unEdificio ! !Edificio subclass: #Aeropuerto	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Aeropuerto commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Aeropuerto methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:46'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 20:32'!inicializarAeropuertotiempoConstruccion :=5.! !!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 23:37'!construirBombardero|bombardero|procesoConstruccion :=true.bombardero:= Bombardero crearBombardero .^bombardero.! !!Aeropuerto methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 21:53'!esAeropuerto^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Aeropuerto class	instanceVariableNames: ''!!Aeropuerto class methodsFor: 'Constructor' stamp: 'Fede 8/31/2018 21:57'!crearAeropuerto|unAeropuerto|unAeropuerto:= self crearEdificio: 30 tiempo:4  cuentaTiempo:0  vida:5  contadorTurno:0.unAeropuerto inicializarAeropuerto. ^unAeropuerto ! !Edificio subclass: #Casa	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Casa commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Casa methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:06'!esCasa^true.! !!Casa methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:04'!verifCreacionCiviles|civil|civil:=nil.(contadorTurno==tiempo)ifTrue:[civil:=Civil crearCivil.	contadorTurno:=0]ifFalse:[contadorTurno:=contadorTurno+1].^civil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Casa class	instanceVariableNames: ''!!Casa class methodsFor: 'Constructor' stamp: 'Fede 8/31/2018 21:56'!crearCasa|unaCasa|unaCasa:=self crearEdificio: 3 tiempo:1  cuentaTiempo:0  vida:2  contadorTurno:0. ^unaCasa.! !Edificio subclass: #EscuelaM	instanceVariableNames: 'civiles soldados tiempoCiv tiempoSold'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!EscuelaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:52'!capacita^true.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 09:46'!testColSold^soldados.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:09'!finEntrenamientoSoldados:unaColSol|colSolPlus nuevoSolPlus|"Fin entrenamiento soldado y crea un soldadoPlus"colSolPlus:=OrderedCollection new.unaColSol do:[:cadaSol| nuevoSolPlus  :=SoldadoPlus crearSoldadoplus .colSolPlus add:nuevoSolPlus ].^colSolPlus .! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/17/2018 11:19'!verifCapacitacionesCiviles|colCiv nuevaCol colSol|colCiv:=civiles select:[:cadaCivil|(cadaCivil verifCapacitacion: tiempoCiv )].colSol:=self finEntrenamientoCiviles: colCiv.nuevaCol :=civiles reject:[:cadaCivil|(cadaCivil verifCapacitacion: tiempoCiv)].civiles:=nuevaCol.^colSol.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:38'!entrenarSoldado:unSoldado dinero:dinero|exito|exito:=false.(dinero>=3)ifTrue:[soldados add:unSoldado.exito:=true.].^exito.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:33'!inicializarEscuelaMciviles:=OrderedCollection new.soldados:=OrderedCollection new.tiempoCiv :=2.tiempoSold:=3.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:47'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:38'!entrenarCivil:unCivil dinero:dinero|exito|"Entrena un civil"exito:=false.(dinero>=2)ifTrue:[civiles add:unCivil.exito:=true.].^exito.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 09:46'!testColCiviles^civiles.! !!EscuelaM methodsFor: 'Metodos' stamp: 'LiamO 8/17/2018 11:24'!verifCapacitacionesSoldados|nuevaCol colSol colSolPlus|colSol:=soldados select:[:cadaSol|(cadaSol verifCapacitacionSol:  3  )].colSolPlus:=self finEntrenamientoSoldados: colSol.nuevaCol :=soldados reject:[:cadaSol|(cadaSol verifCapacitacionSol: 3)].soldados:=nuevaCol.^colSolPlus.! !!EscuelaM methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:09'!finEntrenamientoCiviles:unaColCiv|colSol nuevoSol|"Fin de entrenamiento civil y crea el soldado"colSol:=OrderedCollection new.unaColCiv do:[:cadaCiv| nuevoSol  :=Soldado crearSoldado .colSol add:nuevoSol ].^colSol.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EscuelaM class	instanceVariableNames: ''!!EscuelaM class methodsFor: 'Constructor' stamp: 'Fede 8/31/2018 21:57'!crearEscuelaM|unaEscuelaM|unaEscuelaM:= self crearEdificio:10  tiempo:2  cuentaTiempo:0  vida:4  contadorTurno:0. unaEscuelaM inicializarEscuelaM  .^unaEscuelaM! !Edificio subclass: #Fabrica	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Fabrica commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Fabrica methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:16'!esFabrica^true.! !!Fabrica methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!Fabrica methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 20:52'!construirCamion|camion|procesoConstruccion :=true.camion:= Camion crearCamion.^camion .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fabrica class	instanceVariableNames: ''!!Fabrica class methodsFor: 'Constructor' stamp: 'Fede 8/31/2018 21:58'!crearFabrica|unaFabrica|unaFabrica:=self crearEdificio: 20 tiempo:3  cuentaTiempo:0  vida:4  contadorTurno:0.^unaFabrica ! !Edificio subclass: #FabricaM	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!FabricaM commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!FabricaM methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 23:59'!esFabricaM^true.! !!FabricaM methodsFor: 'Metodos' stamp: 'Fabio 6/8/2018 14:48'!verifDinero: dineroCivilizacion^dineroCivilizacion==coste.! !!FabricaM methodsFor: 'Metodos' stamp: 'LiamO 8/15/2018 00:02'!construirTanque|tanque|procesoConstruccion :=true.tanque:=Tanque crearTanque.^tanque.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FabricaM class	instanceVariableNames: ''!!FabricaM class methodsFor: 'Constructor' stamp: 'Fede 8/31/2018 21:58'!crearFabricaM|unaFabricaM|unaFabricaM:=self crearEdificio: 25 tiempo:4  cuentaTiempo:0  vida:5  contadorTurno:0.^unaFabricaM ! !Object subclass: #Juego	instanceVariableNames: 'colCivilizaciones colRegiones turno turnoGlobal turnoTope cont'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Juego commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colCivilizaciones:		<Object>	colRegiones:		<Object>    Implementation Points!!Juego methodsFor: 'Metodos' stamp: 'LiamO 6/27/2018 09:41'!getColCivilizaciones^colCivilizaciones .! !!Juego methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 20:02'!getTurnoGlobal^turnoGlobal! !!Juego methodsFor: 'Metodos' stamp: 'LiamO 6/27/2018 09:56'!getColRegiones^colRegiones.! !!Juego methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 22:29'!getTurno^turno.! !!Juego methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 23:08'!ejecutarTurno:civilizacionescivilizaciones do:[:cadaCiv|cadaCiv actualizarTurno: false].(civilizaciones at:(turno % (civilizaciones size)+1)) turnoActual.(civilizaciones at:(turno % (civilizaciones size)+1)) actualizarTurno: true.turno := turno + 1. ((cont) = turnoTope) ifTrue:[turnoGlobal:= (turnoGlobal + 1). cont:=0]								ifFalse:[cont := cont + 1].! !!Juego methodsFor: 'Inicializador' stamp: 'Fede 9/3/2018 17:19'!inicializarJuego:cantCivilizaciones|unaCiv unaReg reg regiones regRandom gui|colCivilizaciones :=OrderedCollection new.colRegiones:=OrderedCollection new.turno:= ((1 to:cantCivilizaciones) atRandom) .turnoGlobal :=1.cont := 0.turnoTope := cantCivilizaciones."añado fede"gui:= UIManager default.1 to: cantCivilizaciones do:[:cadaElto|unaCiv:=Civilizacion crearCivilizacion:(gui textEntry: '¿nombre jugador Nº: ' , (cadaElto asString), '?')  dinero:5 .colCivilizaciones add:unaCiv].1 to: 30 do:[:cadaElto|unaReg:=Region crearRegion: cadaElto .colRegiones add:unaReg].colCivilizaciones do:[:cadaCiv|regRandom:=(1to:30)atRandom. ((colRegiones at:regRandom) getColUnidades) ifEmpty:[cadaCiv agregarRegion:(colRegiones at:regRandom).(colRegiones at:regRandom) agregarUnidad: Civil crearCivil.]  ifNotEmpty:[(regRandom := (regRandom+((1 to: 30) atRandom) % 30)) .( cadaCiv agregarRegion: regRandom).  (colRegiones at: regRandom) agregarUnidad: Civil crearCivil.].]. "Asigna las limitrofes a cada region"reg:=colRegiones at:1.regiones:=colRegiones select:[:cadaElto| (cadaElto getCoordenada =2)|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=8)].reg asignarLimitrofe: regiones.reg:=colRegiones at:2.regiones:=colRegiones select:[:cadaElto| (cadaElto getCoordenada =1)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=9) | (cadaElto getCoordenada = 8)].reg asignarLimitrofe:regiones.reg:=colRegiones at:3.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=9)].reg asignarLimitrofe:regiones.reg:=colRegiones at:4.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=10)].reg asignarLimitrofe:regiones.reg:= colRegiones at:5.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=6)].reg asignarLimitrofe: regiones.reg:=colRegiones at:6.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=12)].reg asignarLimitrofe:regiones.reg:=colRegiones at:7.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=1)|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=13)].reg asignarLimitrofe:regiones.reg:=colRegiones at:8.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=1)|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=13)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=15)].reg asignarLimitrofe: regiones.reg:=colRegiones at:9.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=2)|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=15)|(cadaElto getCoordenada=16)].reg asignarLimitrofe: regiones.reg:=colRegiones at:10.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=3)|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=15)|(cadaElto getCoordenada=16)|(cadaElto getCoordenada=17)].reg asignarLimitrofe: regiones.reg:=colRegiones at:11.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=4)|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=6)|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=16)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=18)].reg asignarLimitrofe: regiones.reg:=colRegiones at:12.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=6)|(cadaElto getCoordenada=5)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=18)].reg asignarLimitrofe: regiones.reg:=colRegiones at:13.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=19)|(cadaElto getCoordenada=20)].reg asignarLimitrofe: regiones.reg:=colRegiones at:14.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=7)|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=13)|(cadaElto getCoordenada=15) |(cadaElto getCoordenada=19) |(cadaElto getCoordenada=20) |(cadaElto getCoordenada=21)].reg asignarLimitrofe: regiones.reg:=colRegiones at:15.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=8)|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=10) |(cadaElto getCoordenada=14) |(cadaElto getCoordenada=16)|(cadaElto getCoordenada=20) |(cadaElto getCoordenada=21)|(cadaElto getCoordenada=22)].reg asignarLimitrofe: regiones.reg:=colRegiones at:16.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=9)|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=11) |(cadaElto getCoordenada=15) |(cadaElto getCoordenada=17)|(cadaElto getCoordenada=21)|(cadaElto getCoordenada=22)|(cadaElto getCoordenada=23)].reg asignarLimitrofe: regiones.reg:=colRegiones at:17.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=10)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=16)|(cadaElto getCoordenada=18) |(cadaElto getCoordenada=22) |(cadaElto getCoordenada=23) |(cadaElto getCoordenada=24)].reg asignarLimitrofe: regiones.reg:=colRegiones at:18.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=12)|(cadaElto getCoordenada=11)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=23)|(cadaElto getCoordenada=24)].reg asignarLimitrofe: regiones.reg:=colRegiones at:19.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=13)|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=20)|(cadaElto getCoordenada=25)|(cadaElto getCoordenada=26)].reg asignarLimitrofe: regiones.reg:=colRegiones at:20.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=13)|(cadaElto getCoordenada=14) |(cadaElto getCoordenada=15) |(cadaElto getCoordenada=19) |(cadaElto getCoordenada=21)|(cadaElto getCoordenada=25) |(cadaElto getCoordenada=26)|(cadaElto getCoordenada=27)].reg asignarLimitrofe: regiones.reg:=colRegiones at:21.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=14)|(cadaElto getCoordenada=15) |(cadaElto getCoordenada=16) |(cadaElto getCoordenada=20) |(cadaElto getCoordenada=22) |(cadaElto getCoordenada=26) |(cadaElto getCoordenada=27) |(cadaElto getCoordenada=28)].reg asignarLimitrofe: regiones.reg:=colRegiones at:22.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=15)|(cadaElto getCoordenada=16)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=21)|(cadaElto getCoordenada=23) |(cadaElto getCoordenada=27) |(cadaElto getCoordenada=28) |(cadaElto getCoordenada=29)].reg asignarLimitrofe: regiones.reg:=colRegiones at:23.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=16)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=18)|(cadaElto getCoordenada=22)|(cadaElto getCoordenada=24) |(cadaElto getCoordenada=28) |(cadaElto getCoordenada=29) |(cadaElto getCoordenada=30)].reg asignarLimitrofe: regiones.reg:=colRegiones at:24.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=18)|(cadaElto getCoordenada=17)|(cadaElto getCoordenada=23)|(cadaElto getCoordenada=29)|(cadaElto getCoordenada=30)].reg asignarLimitrofe: regiones.reg:=colRegiones at:25.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=19)|(cadaElto getCoordenada=20) |(cadaElto getCoordenada=26)].reg asignarLimitrofe: regiones.reg:=colRegiones at:26.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=25) |(cadaElto getCoordenada=19) |(cadaElto getCoordenada=20) |(cadaElto getCoordenada=21) |(cadaElto getCoordenada=27)].reg asignarLimitrofe: regiones.reg:=colRegiones at:27.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=26)|(cadaElto getCoordenada=20) |(cadaElto getCoordenada=21) |(cadaElto getCoordenada=22) |(cadaElto getCoordenada=28)].reg asignarLimitrofe: regiones.reg:=colRegiones at:28.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=27)|(cadaElto getCoordenada=21) |(cadaElto getCoordenada=22) |(cadaElto getCoordenada=23) |(cadaElto getCoordenada=29)].reg asignarLimitrofe: regiones.reg:=colRegiones at:29.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=28)|(cadaElto getCoordenada=22) |(cadaElto getCoordenada=23) |(cadaElto getCoordenada=24) |(cadaElto getCoordenada=30)].reg asignarLimitrofe: regiones.reg:=colRegiones at:30.regiones:=colRegiones select:[:cadaElto|(cadaElto getCoordenada=24) |(cadaElto getCoordenada=23) |(cadaElto getCoordenada=29)].reg asignarLimitrofe: regiones.self ejecutarTurno: colCivilizaciones .	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: ''!!Juego class methodsFor: 'Constructor' stamp: 'LiamO 6/27/2018 09:45'!crearJuego:cantCivilizaciones|unJuego|unJuego:=self new.unJuego inicializarJuego: cantCivilizaciones .^unJuego.! !ImageMorph subclass: #MapaVisual	instanceVariableNames: 'bCerrar bMinimizar juego bPreg bPasarTurno bTocaTurno bTurnoGlobal nombreMorp tamOrigin'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!MapaVisual commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!MapaVisual methodsFor: 'Inicializador' stamp: 'Fede 9/2/2018 17:33'!inicializarMapaVisual|f gui cantJug jug|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.gui := UIManager default.cantJug := (gui textEntry:'¿Cuantos jugadores seran?') asInteger.juego:=Juego crearJuego: cantJug.super initialize.self color: Color blue.self extent: (1024@720).self position: (50@50).self agregarRegiones:cantJug.bCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction:[self pasarTurno.]."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self addMorph: bCerrar.self addMorph: bMinimizar.self addMorph: bPasarTurno.self form: f."para saber quien empieza"jug := (juego getColCivilizaciones) detect:[:a| (a getMiTurno)].self confirm: 'Inicia jugando: ' , (jug getNombre) asString.self openInWorld.! !!MapaVisual methodsFor: 'Inicializador' stamp: 'Liam 8/27/2018 15:10'!abrirAlgojuego:=Juego crearJuego: 2.super initialize.self color: Color blue.self extent: (1024@720).self position: 50@50.self openInWorld.bMinimizar :=BotonAccion new.bMinimizar color:Color black.bMinimizar position:(325@40).bMinimizar mouseAction:[self cerrar].self addMorph:bCerrar.! !!MapaVisual methodsFor: 'Inicializador' stamp: 'Fede 9/2/2018 17:33'!inicializarMapaVisual:cantJug|f jug|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.self form: f.juego:=Juego crearJuego: cantJug.super initialize.self color: Color blue.self extent: (1024@720).self position: 50@50.self agregarRegiones:cantJug.bCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction: [ self pasarTurno.].self addMorph: bPasarTurno."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self openInWindow.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 14:29'!pasarTurnojuego ejecutarTurno: (juego getColCivilizaciones).self removeAllMorphs.self reinicio: (juego getColCivilizaciones size).! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:27'!reinicio:cantJug|origen cont reg tam f|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.self form: f.self agregarBotones: cantJug.cont:=1.origen:=(50@50).tamOrigin := origen.[ cont<=6 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg position: origen.origen :=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((((juego getColRegiones at:cont) getColEdificios) isNotEmpty)|(((juego getColRegiones at:cont) getColUnidades) isNotEmpty)) ifTrue:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."self addMorph:reg.(juego getColRegiones at:cont) addDependent: reg.cont:=cont+1. ].origen:=(50@150).[ cont<=12 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).((((juego getColRegiones at:cont) getColEdificios) isNotEmpty)|(((juego getColRegiones at:cont) getColUnidades) isNotEmpty)) ifTrue:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].].reg agregarRegion: (juego getColRegiones at:cont).(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."self addMorph: reg.cont:=cont+1. ].origen:=(50@250).[ cont<=18 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((((juego getColRegiones at:cont) getColEdificios) isNotEmpty)|(((juego getColRegiones at:cont) getColUnidades) isNotEmpty)) ifTrue:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@350).[ cont<=24 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((((juego getColRegiones at:cont) getColEdificios) isNotEmpty)|(((juego getColRegiones at:cont) getColUnidades) isNotEmpty)) ifTrue:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@450).[ cont<=30 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.reg agregarRegion: (juego getColRegiones at:cont).((((juego getColRegiones at:cont) getColEdificios) isNotEmpty)|(((juego getColRegiones at:cont) getColUnidades) isNotEmpty)) ifTrue:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].].origen:=origen +(100@0).self addMorph: reg.(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."cont:=cont+1. ].! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 21:33'!quienToca:cantJug|jug|jug := (juego getColCivilizaciones) detect:[:a| (a getMiTurno)].self inform: 'Turno del Jugador: ' , (jug getNombre) asString.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:02'!agregarBotones: cantJugbCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction: [ self pasarTurno]."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self addMorph: bCerrar.self addMorph: bMinimizar.self addMorph: bPasarTurno.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:26'!agregarRegiones:cantJug|origen cont reg|origen:=self position.tamOrigin := origen.cont:=1.origen:=(50@50).[ cont<=6 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg position: origen.origen :=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant|(((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].]."reg mouseAction:[reg pregunta]."self addMorph:reg.(juego getColRegiones at:cont) addDependent: reg.cont:=cont+1. ].origen:=(50@150).[ cont<=12 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].].reg agregarRegion: (juego getColRegiones at:cont).(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."self addMorph: reg.cont:=cont+1. ].origen:=(50@250).[ cont<=18 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@350).[ cont<=24 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty:[(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@450).[ cont<=30 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].].origen:=origen +(100@0).self addMorph: reg.(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."cont:=cont+1. ].origen := tamOrigin.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fabio 8/23/2018 13:37'!cerrar"Cierra la ventana"^self delete.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 14:13'!minimizar"minimiza la ventana"^self collapse.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 20:16'!turnoGlobalself inform: 'Es el turno Nº: ' , (juego getTurnoGlobal) asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MapaVisual class	instanceVariableNames: 'bTurnoGlobal'!BorderedMorph subclass: #PRegion	instanceVariableNames: 'bColor regionActual bPreg civActual nombreMorp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!PRegion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:51'!desplazarUnidad|gui reply|gui := UIManager default.reply := gui textEntry:'¿que unidad desea desplazar?1-Soldado2-Soldado plus3-Tanque4-Camion5-Bombardero'.(reply = '1') ifTrue:[regionActual desplazarUnidad: (self buscarUnidad:'soldado') hacia: (gui textEntry: (self coorLimitesPropias)) asInteger].(reply = '2') ifTrue:[regionActual desplazarUnidad: (self buscarUnidad:'soldadoPlus') hacia: ((gui textEntry: 'coordenada?')asInteger)].(reply = '3') ifTrue:[regionActual desplazarUnidad: (self buscarUnidad:'tanque') hacia: ((gui textEntry: 'coordenada?')asInteger)].(reply = '4') ifTrue:[regionActual desplazarUnidad: (self buscarUnidad:'camion') hacia: ((gui textEntry: 'coordenada?')asInteger)].(reply = '5') ifTrue:[regionActual desplazarUnidad: (self buscarUnidad:'bombardero') hacia: ((gui textEntry: 'coordenada?')asInteger)].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:34'!buscarUnidad:nombre|unidadBus |(nombre='soldado') ifTrue:[unidadBus := (regionActual getColUnidades) detect:[:soldat| soldat soySoldado].].(nombre='soldadoPlus') ifTrue:[unidadBus := (regionActual getColUnidades) detect:[:soldatPlus| soldatPlus soySoldadoPlus].].(nombre='tanque') ifTrue:[unidadBus := (regionActual getColUnidades) detect:[:tan| tan soyUnTanque].].(nombre='camion') ifTrue:[unidadBus := (regionActual getColUnidades) detect:[:cami| cami soyCamion].].(nombre='bombardero') ifTrue:[unidadBus := (regionActual getColUnidades) detect:[:bomba| bomba soyBomba].].^unidadBus.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 12:08'!coorLimites|s|s:= ''.(regionActual getColRegLimitrofes) do:[:cadaLim| ((cadaLim getColEdificios )isEmpty) ifTrue: [ s:= 'la coordenada limite es: ' , (cadaLim getCoordenada) asString, String cr , s].].^s.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/29/2018 13:10'!agregarRegion:unaRegregionActual := unaReg.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/28/2018 21:42'!cerrar^self delete.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:23'!conquista|colRegParaConq gui coord|colRegParaConq := (civActual getColRegPorConquistar).gui := UIManager default.coord := (gui textEntry: 'ingrese la coordenada limitrofe que desea conquistar de' , String cr, self coorLimites).regionActual conquistaDesocupada:(coord asInteger) col: colRegParaConq.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/30/2018 21:55'!agregarCiv:unaCiv cual:numcivActual:= unaCiv.(num = 1) ifTrue:[self color: Color red.].(num = 2) ifTrue:[self color: Color blue].(num = 3) ifTrue:[self color: Color green].(num = 4) ifTrue:[self color: Color black].(num = 5) ifTrue:[self color: Color orange].(num = 6) ifTrue:[self color: Color yellow].(num = 7) ifTrue:[self color: Color purple].(num = 8) ifTrue:[self color: Color cyan].(num = 9) ifTrue:[self color: Color pink].(num = 10) ifTrue:[self color: Color brown].(num = 11) ifTrue:[self color: Color magenta].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 20:05'!update:unaReg(unaReg getColRegPorConquistar)ifNotEmpty:[self color: Color white].self changed.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 01:34'!construccion|gui reply dinerito|dinerito:= (civActual getDinero).gui := UIManager default.reply := gui textEntry: '¿que construccion desea realizar?1-casa2-escuela3-fabrica4-fabricaM5-aeropuerto'.(reply = '1') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'casa'. civActual disminuirDinero: 3].(reply = '2') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'escuelaM'. civActual disminuirDinero: 10].(reply = '3') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'fabrica' . civActual disminuirDinero: 20].(reply = '4') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'fabricaM' .civActual disminuirDinero: 25].(reply = '5') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'aeropuerto' .civActual disminuirDinero: 30].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:46'!coorLimitesPropias|s|s:= ''.(regionActual getColRegLimitrofes) do:[:cadaLim| (civActual getColRegiones) do:[:cadaMia| (cadaMia == cadaLim) ifTrue: [ s:= 'la coordenada limite es: ' , (cadaLim getCoordenada) asString, String cr , s].].].^s.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 21:28'!agregarNombre:civiznombreMorp := BotonAccion new.nombreMorp position: (self position + (10@10)).nombreMorp label: (civiz getNombre).nombreMorp color:Color black.self addMorph: nombreMorp.nombreMorp mouseAction: [ self pregunta]! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 14:43'!crearUnidades|dinero gui reply|dinero := (civActual getDinero).gui := UIManager default.reply := gui textEntry:'¿que unidad desea crear?1-Soldado2-Soldado plus3-Tanque4-Camion5-Bombardero'.(reply = '1') ifTrue:[(regionActual comenzarEntrenamientoCiviles: civActual). civActual disminuirDinero: 2 ].(reply = '2') ifTrue:[(regionActual comenzarEntrenamientoSoldados: civActual). civActual disminuirDinero: 3].(reply = '3') ifTrue:[(regionActual construirUnidades: dinero construccion:'tanque'). civActual disminuirDinero: 8 ].(reply = '4') ifTrue:[(regionActual construirUnidades: dinero construccion:'camion'). civActual disminuirDinero: 6 ].(reply = '5') ifTrue:[(regionActual construirUnidades: dinero construccion:'bombardero'). civActual disminuirDinero: 10 ].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:24'!getCivActu^(civActual getNombre).! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 13:20'!pregunta |gui reply|(civActual getMiTurno)ifTrue:[gui := UIManager default.reply := gui textEntry:'¿que desea hacer?.1- construccion2- crear Unidades3- conquista4- Desplazar unidad5- ver unidades6- ver edificios7- conocer coordenada8- obtener coordenadas limitrofes'.							(reply = '1') ifTrue:[self  construccion].(reply = '2') ifTrue:[self crearUnidades].(reply = '3') ifTrue:[self conquista].(reply = '4') ifTrue:[self desplazarUnidad].(reply = '5') ifTrue:[reply inform: (regionActual getColUnidades) asString  ].(reply = '6') ifTrue: [reply inform: (regionActual getColEdificios) asString].(reply = '7') ifTrue: [reply  inform: ((regionActual getCoordenada) asString) ].(reply = '8') ifTrue:[reply inform: self coorLimites].(reply = '9') ifTrue: [ self inform: (civActual getColRegiones) asString ].(reply = '10') ifTrue: [ self inform: (civActual getDinero) asString ].]ifFalse:[self inform: 'no es tu turno'].! !!PRegion methodsFor: 'initialization' stamp: 'Fede 8/31/2018 21:28'!initializesuper initialize.! !Object subclass: #Region	instanceVariableNames: 'coordenada colRegionesLimitrofes colUnidades colEdificios colEdifEnConstruccion colUnidEnConstruccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Region commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	colEdificios:		<Object>	colRegionesLimitrofes:		<Object>	colUnidades:		<Object>	coordenada:		<Object>    Implementation Points!!Region methodsFor: 'inicializador' stamp: 'Fede 9/1/2018 19:24'!inicializadorRegion:unaCoordenadacoordenada:=unaCoordenada.colRegionesLimitrofes:=OrderedCollection new.colEdificios :=OrderedCollection new.colUnidades :=OrderedCollection new.colEdifEnConstruccion :=OrderedCollection new.colUnidEnConstruccion :=OrderedCollection new.self changed.! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 16:19'!construirUnidades:dineroCivilizacion construccion:tipoConstruccion|edificio unidad|(tipoConstruccion='bombardero')ifTrue: [ (dineroCivilizacion >10)				ifTrue:[edificio:=colEdificios detect:[:cadaEdif| cadaEdif esAeropuerto & (cadaEdif getProceso =false)]  .unidad:=edificio construirBombardero.colUnidEnConstruccion  add:unidad.]				ifFalse:[^'Dinero Insuficiente'].				^unidad. 				].			(tipoConstruccion='camion')ifTrue: [ (dineroCivilizacion >5)				ifTrue:[edificio:=colEdificios detect:[:cadaEdif| (cadaEdif esFabrica) & (cadaEdif getProceso=false)] .unidad:=edificio construirCamion  .colUnidEnConstruccion add:unidad.]				ifFalse:[^'Dinero Insuficiente'].				^unidad.				].			 (tipoConstruccion='tanque')ifTrue: [ (dineroCivilizacion >8)				ifTrue:[edificio:=colEdificios detect:[:cadaEdif| (cadaEdif esFabricaM )&(cadaEdif getProceso=false)]  .unidad:=edificio construirTanque  .colUnidEnConstruccion add:unidad.]				ifFalse:[^'Dinero Insuficiente'].				^unidad.				].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 07:48'!getColEdificios^colEdificios .! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 18:28'!obtenerMejorUnidad|colMejorAtaque|colMejorAtaque:=colUnidades asSortedCollection: [ :u1 :u2|(u1 getAtaque) >=(u2 getAtaque)].^colMejorAtaque at:1.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 19:49'!agregarUnidad:unaUnidadcolUnidades add:unaUnidad.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:46'!desplazarTransporte:unTransporte|continuar|continuar:=true.self agregarUnidad: unTransporte.unTransporte getColUnidTransp do:[:cadaUni|self agregarUnidad:cadaUni.].unTransporte restarDespTemp.(unTransporte getDespTemp==0)ifTrue:[unTransporte resetearDespTemp.	continuar:=false.].^continuar.! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 19:07'!verifExistenciaUnidades|existUnidades|existUnidades := colUnidades isNotEmpty.^existUnidades! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 19:57'!atacar:mejorUni|mejorDefensor dañoTotal muerto victoria dañoAt dañoDef test|mejorDefensor:=self obtenerMejorDefensor .test:=0.dañoTotal:=0.victoria:=false.dañoAt:=(mejorUni obtenerDañoAtaque).dañoDef:=(mejorDefensor obtenerDañoDefensa).dañoTotal:=(dañoAt - dañoDef) .(dañoTotal >= 0)ifTrue:[muerto:=(mejorDefensor disminuirVida: dañoTotal).	(muerto)		ifTrue:[colUnidades remove:mejorDefensor. victoria :=true.]	]ifFalse:[dañoTotal:=(dañoTotal*(-1)).	muerto:=(mejorUni disminuirVida: dañoTotal).	(muerto)	ifTrue:[victoria:=false].].^victoria  "(dañoTotal>=0)ifTrue:[victoria:=true]ifFalse:[victoria:=false].^victoria."! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 20:51'!conquistaDesocupada:unaCoordenada col:colRegPorConquistar|reg unCivil unaRegPorConquistar|reg:=self recuperarRegion:unaCoordenada .reg ifNotNil:[	(reg verifExistenciaUnidades )	ifFalse:[unCivil:=colUnidades detect:[:cadaUni|cadaUni correspondeConstruir ]		ifNone:[^nil].		unaRegPorConquistar :=reg conquista:unCivil.		colRegPorConquistar add:unaRegPorConquistar.	self quitarUnidad: unCivil.]].		^unaRegPorConquistar .! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:57'!otorgarDinero^(5 to:8)atRandom.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:33'!getCoordenada^coordenada.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:45'!getColRegLimitrofes^colRegionesLimitrofes .! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 19:01'!obtenerMejorDefensor|colMejorDefensor|colMejorDefensor:=colUnidades asSortedCollection: [ :u1 :u2|(u1 getAtaque) >=(u2 getAtaque)].^colMejorDefensor at:1.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:55'!realizarDespTrans: unTransp|continuar|continuar:=true.self agregarUnidad:unTransp.unTransp restarDespTemp.unTransp getColUnidTransp do:[:cadaUni| self agregarUnidad:cadaUni].(unTransp getDespTemp==0)ifTrue:[unTransp resetearDespTemp.	continuar:=false.]. ^continuar.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 14:39'!verifEntrenamientoSoldado|colEscu colSoldPlus|colEscu := (colEdificios select:[:cadaEsc| (cadaEsc capacita)]).colEscu ifNotNil:[colSoldPlus := ((colEscu at:1) verifCapacitacionesSoldados).colSoldPlus ifNotNil:[colSoldPlus do:[:cadaSol|colUnidades add:cadaSol]].].! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 18:25'!comienzoTurno|colEscM resp|"colEdificios do:[:cadaEdif|cadaEdif verifConstrucciones 	ifTrue:[colEdificios add:cadaEdif.]].self verifExistenciaUnidades .""colEscM:=colEdificios select:[:cadaEdif|cadaEdif capacita].colEscM collect:[:cadaEscM|cadaEscM verifCapacitacionesCiviles ]."self verifConstrucEdif .self verifConstrucUnidades .self verificarCreacionCiviles .resp := colEdificios detect: [:cadaEd| cadaEd capacita] ifNone:[nil].resp ifNotNil: [ self verifEntrenamientoCivil.self verifEntrenamientoSoldado].colUnidades do:[:cadaUni| cadaUni resetearDespTemp].! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 19:12'!recuperarRegion:coordEnemiga|regEne|regEne := colRegionesLimitrofes detect:[:cadaElto|cadaElto getCoordenada ==coordEnemiga] ifNone:[^nil].^regEne.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 21:40'!construirEdificios:dineroCivilizacion construccion:tipoConstruccion|civil edificio|(tipoConstruccion='casa')ifTrue: [ (dineroCivilizacion >2)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearCasa.colEdifEnConstruccion add:edificio.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='fabrica')ifTrue: [ (dineroCivilizacion >19)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearFabrica .colEdifEnConstruccion add:edificio.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			 (tipoConstruccion='fabricaM')ifTrue: [ (dineroCivilizacion >24)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearFabricaM  .colEdifEnConstruccion add:edificio.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='escuelaM')ifTrue: [ (dineroCivilizacion >9)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearEscuelaM  .colEdifEnConstruccion add:edificio.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].			(tipoConstruccion='aeropuerto')ifTrue: [ (dineroCivilizacion >29)				ifTrue:[civil:=colUnidades detect:[:cadaUnidad| cadaUnidad correspondeConstruir]  .edificio:=civil crearAeropuerto  .colEdifEnConstruccion add:edificio.]				ifFalse:[^'Dinero Insuficiente'].				^edificio 				].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:32'!agregarEdif:unEdifcolEdificios add:unEdif.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 18:23'!realizarDesplazamiento:unaUnidad|continuar|continuar:=true.self agregarUnidad: unaUnidad.unaUnidad setDespTemp: ((unaUnidad getDespTemp) - 1) .^continuar.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:47'!desplazarUnidades: colUniTrans conTransporte:unTrans hacia:unaCoord|region seguirDesplazando|seguirDesplazando:=false.region:=self recuperarRegion: unaCoord.(unTrans getDespTemp>0)ifTrue:[colUniTrans do:[:cadaUnidad|self quitarUnidad:cadaUnidad].	colUnidades remove:unTrans.	(unTrans soyUnTanque==false)	ifTrue:[unTrans calcularVida].	colUniTrans do:[:cadaUni|unTrans hacerSubir: cadaUni].	seguirDesplazando:=region realizarDespTrans:unTrans.].^seguirDesplazando.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:48'!quitarUnidad:unaUnidadcolUnidades remove:unaUnidad.! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 17:09'!comenzarEntrenamientoCiviles:unaCivilizacion|civil escuela dinero|dinero:=unaCivilizacion getDinero .escuela := colEdificios detect:[:cadaEd| cadaEd capacita.]			ifNone:[^nil].						"cuando detecta la escuela enviar mensaje de entrenar civil de un civil que se agarre de la region"			civil := colUnidades detect: [:cadaUni| cadaUni correspondeConstruir.]ifNone:[^nil]. 	colUnidades remove:civil.escuela entrenarCivil: civil dinero: dinero.   								 ! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 09:09'!verificarCreacionCiviles|civil colCasas|colCasas:=colEdificios select:[:cadaEdif|cadaEdif esCasa ].colCasas do:[:cadaCasa|(civil:=cadaCasa verifCreacionCiviles) 	ifNotNil:[colUnidades add:civil.]].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:01'!verifConstrucEdif|colEdifListos|colEdifEnConstruccion do:[:cadaEdif|(cadaEdif verifTiempoEdif  )	ifTrue:[colEdificios add: cadaEdif .]].colEdifListos:=colEdifEnConstruccion reject:[:cadaEdif|(cadaEdif edifFinalizado)].colEdifEnConstruccion :=colEdifListos.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 18:19'!desplazarUnidad: unaUnidad hacia:coordRegion|region seguirDesplazando|region:=self recuperarRegion: coordRegion.seguirDesplazando:=false.((unaUnidad getDespTemp)>0)ifTrue:[self quitarUnidad: unaUnidad.	seguirDesplazando:=region realizarDesplazamiento:unaUnidad.].^seguirDesplazando.! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:46'!conquista:unCivilcolUnidades add:unCivil.self construirEdificios:3 construccion:'casa'.^self.! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/9/2018 10:30'!getColUnidades^colUnidades .! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 19:57'!batalla:coordEnemiga|laRegion existUnidades mejorUni victoria|laRegion:= (self recuperarRegion: coordEnemiga).victoria:=true.existUnidades := (laRegion verifExistenciaUnidades).(existUnidades )ifTrue:[mejorUni:=laRegion obtenerMejorUnidad.	victoria:=laRegion atacar:mejorUni.].(victoria)ifTrue:[^'Victoria']ifFalse:[^'el enemigo aun vive'].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 22:42'!verifConstrucUnidades|colUniListos|colUnidEnConstruccion do:[:cadaUni|(cadaUni verifTiempoUni )	ifTrue:[colUnidades add: cadaUni .]].colUniListos :=colUnidEnConstruccion  reject:[:cadaUni|(cadaUni uniFinalizada )].colUnidEnConstruccion:=colUniListos .! !!Region methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 16:56'!asignarLimitrofe:colRegionescolRegiones do:[:cadaElto| colRegionesLimitrofes add:cadaElto].! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 08:12'!getColEdifEnC^colEdifEnConstruccion .! !!Region methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:45'!comenzarEntrenamientoSoldados:unaCivilizacion|soldado escuela dinero|dinero:=unaCivilizacion getDinero .escuela := colEdificios detect:[:cadaEd| cadaEd capacita.]			ifNone:[^nil].						"cuando detecta la escuela enviar mensaje de entrenar civil de un civil que se agarre de la region"			soldado:= colUnidades detect: [:cadaUni| cadaUni soySoldado .]ifNone:[^nil]. 	colUnidades remove:soldado.escuela entrenarSoldado: soldado dinero: dinero. ! !!Region methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 21:57'!getColUniConstruccion^colUnidEnConstruccion .! !!Region methodsFor: 'Metodos' stamp: 'Fede 8/25/2018 19:18'!verifEntrenamientoCivil|colEscu colSold|colEscu := (colEdificios select:[:cadaEsc| (cadaEsc capacita)]).colEscu ifNotNil:[colSold := ((colEscu at:1) verifCapacitacionesCiviles).colSold ifNotNil:[colSold do:[:cadaSol|colUnidades add:cadaSol]].].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Region class	instanceVariableNames: ''!!Region class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 19:06'!crearRegion:unaCoordenada |unaRegion|unaRegion:=self new.unaRegion inicializadorRegion: unaCoordenada.^unaRegion ! !Object subclass: #Unidad	instanceVariableNames: 'coste tiempo vida ataque defensa desplazamiento despTemp uniLista cuentaTiempo'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Unidad commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	ataque:		<Object>	coste:		<Object>	defensa:		<Object>	despTemp:		<Object>	desplazamiento:		<Object>	tiempo:		<Object>	vida:		<Object>    Implementation Points!!Unidad methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:05'!uniFinalizada^uniLista .! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 21:07'!verifTiempoUni|construccion|construccion:=false.(cuentaTiempo==tiempo)ifTrue:[construccion:=true.uniLista:=true.]ifFalse:[cuentaTiempo:=cuentaTiempo+1].^construccion. ! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:55'!getVida^vida .! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:09'!soySoldadoPlus^false.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:48'!resetearDespTempdespTemp:=desplazamiento.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:53'!getDespTemp^despTemp.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:13'!soyCamion^false! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/13/2018 18:05'!getAtaque^ataque.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 8/14/2018 23:18'!getCuentaTiempo^cuentaTiempo .! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:13'!soyBomba^false! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:49'!soySoldado^false.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 15:42'!obtenerDañoDefensa|dañoDefensa|dañoDefensa:=defensa*((1 to:3) atRandom).^dañoDefensa.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 15:42'!obtenerDañoAtaque|dañoAtaque|dañoAtaque:=(ataque*((2 to:4) atRandom)).^dañoAtaque .! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 18:00'!restarDespTempdespTemp:=despTemp-1.! !!Unidad methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 18:16'!setDespTemp:nuevoDespdespTemp := nuevoDesp.! !!Unidad methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:31'!disminuirVida:dañoTotal|muerto|muerto:=false.vida:=vida-dañoTotal .(vida<=0)ifTrue:[muerto:=true].^muerto.! !!Unidad methodsFor: 'Inicializador' stamp: 'LiamO 8/14/2018 22:46'!inicializarUnidad: unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesp desplazamientoTemp:unDespTemp cuentaTiempo:unCuentacoste:=unCoste.tiempo:=unTiempo.vida:=unaVida.ataque:=unAtaque.defensa:=unaDefensa.desplazamiento:=unDesp.despTemp:=unDespTemp.uniLista :=false.cuentaTiempo :=unCuenta.! !!Unidad methodsFor: 'Inicializador' stamp: 'LiamO 8/14/2018 21:07'!inicializarUnidad: unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesp desplazamientoTemp:unDespTempcoste:=unCoste.tiempo:=unTiempo.vida:=unaVida.ataque:=unAtaque.defensa:=unaDefensa.desplazamiento:=unDesp.despTemp:=unDespTemp.uniLista :=false.cuentaTiempo :=0.! !!Unidad methodsFor: 'Inicializador' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Unidad class	instanceVariableNames: ''!!Unidad class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:04'!crearUnidad:unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp|unidad|unidad:= self new.unidad inicializarUnidad: unCoste tiempo:unTiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento: unDesplazamiento  desplazamientoTemp:unDespTemp. ^unidad! !!Unidad class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:45'!crearUnidad:unCoste tiempo:unTiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp cuentaTiempo:unCuenta|unidad|unidad:= self new.unidad inicializarUnidad: unCoste tiempo:unTiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento: unDesplazamiento  desplazamientoTemp:unDespTemp cuentaTiempo:unCuenta. ^unidad! !Unidad subclass: #Civil	instanceVariableNames: 'tiempoCapacitacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Civil commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:37'!crearFabrica|unaFabrica|unaFabrica := Fabrica crearFabrica.^unaFabrica! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/15/2018 00:09'!crearFabricaM|unaFabricaM|unaFabricaM := FabricaM  crearFabricaM.^unaFabricaM! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:18'!verifCapacitacion:unTiempo|finCapacitacion|finCapacitacion :=false.(unTiempo=tiempoCapacitacion  )ifTrue:[finCapacitacion :=true]ifFalse:[tiempoCapacitacion :=tiempoCapacitacion +1].^finCapacitacion .! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:08'!inicializarCiviltiempoCapacitacion :=0.! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 08:19'!crearEscuelaM|unaEscuelaM|unaEscuelaM  := EscuelaM crearEscuelaM .^unaEscuelaM.! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/13/2018 08:20'!crearAeropuerto|unAeropuerto|unAeropuerto := Aeropuerto crearAeropuerto .^unAeropuerto ! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 19:26'!crearCasa|unaCasa|unaCasa := Casa crearCasa.^unaCasa! !!Civil methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:11'!getTiempoCapacitacion^tiempoCapacitacion .! !!Civil methodsFor: 'Metodos' stamp: 'Fabio 6/24/2018 20:04'!correspondeConstruir^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Civil class	instanceVariableNames: ''!!Civil class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:46'!crearCivil|unCivil|unCivil:=self crearUnidad:0  tiempo:2  vida:1  ataque:0  defensa:1  desplazamiento:1  despTemp:1 cuentaTiempo:0.unCivil inicializarCivil .^unCivil.! !Unidad subclass: #Soldado	instanceVariableNames: 'tiempoCapacitacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Soldado commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/17/2018 11:21'!verifCapacitacionSol:unTiempo|finCapacitacion|finCapacitacion :=false.(unTiempo=tiempoCapacitacion  )ifTrue:[finCapacitacion :=true]ifFalse:[tiempoCapacitacion :=tiempoCapacitacion +1].^finCapacitacion .! !!Soldado methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:50'!soySoldado^true.! !!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/17/2018 10:53'!verifCapacitacion:unTiempo|finCapacitacion|finCapacitacion :=false.(unTiempo=tiempoCapacitacion  )ifTrue:[finCapacitacion :=true]ifFalse:[tiempoCapacitacion :=tiempoCapacitacion +1].^finCapacitacion .! !!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/16/2018 23:22'!getTiempoCapacitacion^tiempoCapacitacion .! !!Soldado methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 19:10'!inicializarSoldadotiempoCapacitacion :=0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Soldado class	instanceVariableNames: ''!!Soldado class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:46'!crearSoldado|soldado|soldado:=self crearUnidad: 2 tiempo:3  vida:10  ataque:1  defensa:1  desplazamiento:1  despTemp:1 cuentaTiempo:0.soldado inicializarSoldado .^soldado ! !Unidad subclass: #SoldadoPlus	instanceVariableNames: 'tiempoCapacitacion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!SoldadoPlus commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!SoldadoPlus methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:50'!getTiempoCapacitacion^tiempoCapacitacion .! !!SoldadoPlus methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:50'!inicializarSoldadoPlustiempoCapacitacion:=3.! !!SoldadoPlus methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:50'!verifCapacitacion:unTiempo|finCapacitacion|finCapacitacion :=false.(unTiempo=tiempoCapacitacion  )ifTrue:[finCapacitacion :=true]ifFalse:[tiempoCapacitacion :=tiempoCapacitacion +1].^finCapacitacion .! !!SoldadoPlus methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 17:09'!soySoldadoPlus^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SoldadoPlus class	instanceVariableNames: ''!!SoldadoPlus class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:47'!crearSoldadoplus|soldadoplus|soldadoplus:= self crearUnidad: 3 tiempo:4  vida:15  ataque:2  defensa:1  desplazamiento:2  despTemp:2 cuentaTiempo:0.^soldadoplus  ! !Unidad subclass: #Transporte	instanceVariableNames: 'transp colUnidTransp'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Transporte commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	transp:		<Object>    Implementation Points!!Transporte methodsFor: 'Modificadores' stamp: 'LiamO 8/6/2018 07:26'!setTransp:unTransptransp:=unTransp.colUnidTransp :=OrderedCollection new.! !!Transporte methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:51'!soyUnTanque^false.! !!Transporte methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:55'!getColUnidTransp^colUnidTransp .! !!Transporte methodsFor: 'Metodos' stamp: 'LiamO 8/6/2018 07:50'!hacerSubir:unaUnidadcolUnidTransp add:unaUnidad.! !!Transporte methodsFor: 'Metodos' stamp: 'fede 8/24/2018 14:01'!calcularVida|col suma|suma:=0.col:=self getColUnidTransp.col do:[:cadaElto| suma:=suma + (cadaElto getVida) ].vida :=vida+suma.^vida! !!Transporte methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:51'!inicializarUnidadescolUnidTransp:=OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Transporte class	instanceVariableNames: ''!!Transporte class methodsFor: 'Constructor' stamp: 'Fabio 6/24/2018 18:23'!crearTransporte:unCoste tiempo:untiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp transp:unTransp |unTransporte|unTransporte :=self crearUnidad: unCoste tiempo:untiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento:unDesplazamiento  despTemp:unDespTemp.unTransporte setTransp: unTransp.^unTransporte  ! !!Transporte class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:48'!crearTransporte:unCoste tiempo:untiempo vida:unaVida ataque:unAtaque defensa:unaDefensa desplazamiento:unDesplazamiento despTemp:unDespTemp transp:unTransp cuentaTiempo:unCuenta|unTransporte|unTransporte :=self crearUnidad: unCoste tiempo:untiempo  vida:unaVida  ataque:unAtaque  defensa:unaDefensa  desplazamiento:unDesplazamiento  despTemp:unDespTemp cuentaTiempo:unCuenta.unTransporte setTransp: unTransp.^unTransporte  ! !Transporte subclass: #Bombardero	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Bombardero commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Bombardero methodsFor: 'Metodos' stamp: 'LiamO 8/8/2018 16:38'!getCoste^coste .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bombardero class	instanceVariableNames: ''!!Bombardero class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:48'!crearBombardero|unBombardero|unBombardero:= self crearTransporte:10  tiempo:8  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6 cuentaTiempo:0.^unBombardero  ! !Transporte subclass: #Camion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Camion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Camion methodsFor: 'aplicacion' stamp: 'Fede 9/3/2018 17:13'!soyCamion^true.! !!Camion methodsFor: 'aplicacion' stamp: 'fede 8/24/2018 13:58'!calcularVida^super calcularVida! !!Camion methodsFor: 'aplicacion' stamp: 'fede 8/24/2018 13:58'!getCoste^coste! !!Camion methodsFor: 'aplicacion' stamp: 'Fede 9/3/2018 17:13'!soyBomba^true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Camion class	instanceVariableNames: ''!!Camion class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 23:20'!crearCamion|unCamion|unCamion:= self crearTransporte: 10 tiempo:5  vida:10  ataque:4  defensa:2  desplazamiento:4  despTemp:4  transp:6 cuentaTiempo:0.^unCamion  ! !Transporte subclass: #Tanque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TPO-Apablaza-Quiñonez-Osycka'!!Tanque commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Tanque methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 19:51'!soyUnTanque^true.! !!Tanque methodsFor: 'Metodos' stamp: 'fede 8/24/2018 13:59'!calcularVida^super calcularVida.! !!Tanque methodsFor: 'Metodos' stamp: 'LiamO 7/14/2018 20:14'!getAtaque^ataque.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tanque class	instanceVariableNames: ''!!Tanque class methodsFor: 'Constructor' stamp: 'LiamO 8/14/2018 22:49'!crearTanque|unTanque|unTanque:=self crearTransporte: 8 tiempo:6  vida:25  ataque:4  defensa:3  desplazamiento:2  despTemp:2  transp:1 cuentaTiempo:0.^unTanque ! !