SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-Prueba'!!BotonAccion methodsFor: 'initialization' stamp: 'Liam 8/27/2018 13:51'!initializesuper initialize.self color:Color red.! !!BotonAccion methodsFor: 'initialization' stamp: 'Fede 9/1/2018 19:24'!mouseAction:unBloquebloqueAccion:=unBloque.! !!BotonAccion methodsFor: 'event handling' stamp: 'Liam 8/27/2018 13:52'!mouseUp:unEventosuper mouseUp:unEvento.bloqueAccion value.! !ImageMorph subclass: #MapaConImg	instanceVariableNames: 'f'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-Prueba'!!MapaConImg methodsFor: 'initialization' stamp: 'Liam 8/27/2018 14:20'!initializesuper initialize.! !ImageMorph subclass: #MapaVisual	instanceVariableNames: 'bCerrar bMinimizar juego bPreg bPasarTurno bTocaTurno bTurnoGlobal nombreMorp tamOrigin'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-Prueba'!!MapaVisual commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!MapaVisual methodsFor: 'Inicializador' stamp: 'Fede 9/2/2018 17:33'!inicializarMapaVisual|f gui cantJug jug|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.gui := UIManager default.cantJug := (gui textEntry:'¿Cuantos jugadores seran?') asInteger.juego:=Juego crearJuego: cantJug.super initialize.self color: Color blue.self extent: (1024@720).self position: (50@50).self agregarRegiones:cantJug.bCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction:[self pasarTurno.]."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self addMorph: bCerrar.self addMorph: bMinimizar.self addMorph: bPasarTurno.self form: f."para saber quien empieza"jug := (juego getColCivilizaciones) detect:[:a| (a getMiTurno)].self confirm: 'Inicia jugando: ' , (jug getNombre) asString.self openInWorld.! !!MapaVisual methodsFor: 'Inicializador' stamp: 'Liam 8/27/2018 15:10'!abrirAlgojuego:=Juego crearJuego: 2.super initialize.self color: Color blue.self extent: (1024@720).self position: 50@50.self openInWorld.bMinimizar :=BotonAccion new.bMinimizar color:Color black.bMinimizar position:(325@40).bMinimizar mouseAction:[self cerrar].self addMorph:bCerrar.! !!MapaVisual methodsFor: 'Inicializador' stamp: 'Fede 9/2/2018 17:33'!inicializarMapaVisual:cantJug|f jug|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.self form: f.juego:=Juego crearJuego: cantJug.super initialize.self color: Color blue.self extent: (1024@720).self position: 50@50.self agregarRegiones:cantJug.bCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction: [ self pasarTurno.].self addMorph: bPasarTurno."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self openInWindow.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 15:48'!pasarTurnojuego ejecutarTurno: (juego getColCivilizaciones).self reinicio: (juego getColCivilizaciones size).! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 15:38'!reinicio:cantJug|origen cont reg tam f|f := Form fromFileNamed: 'D:\Kuro\imagen.png'.self form: f.self agregarBotones: cantJug.cont:=1.origen:=(50@50).tamOrigin := origen.[ cont<=6 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg position: origen.origen :=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColEdificios) ifNotEmpty: [(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."self addMorph:reg.(juego getColRegiones at:cont) addDependent: reg.cont:=cont+1. ].origen:=(50@150).[ cont<=12 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).((juego getColRegiones at:cont) getColEdificios) ifNotEmpty: [(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].].reg agregarRegion: (juego getColRegiones at:cont).(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."self addMorph: reg.cont:=cont+1. ].origen:=(50@250).[ cont<=18 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColEdificios) ifNotEmpty: [(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@350).[ cont<=24 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColEdificios) ifNotEmpty:[(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@450).[ cont<=30 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColEdificios) ifNotEmpty: [(1 to:cantJug) do:[:cant|(tam:=((juego getColCivilizaciones at:cant)getColRegiones size)). (1to:tam) do:[:a| (((juego getColCivilizaciones at:cant)getColRegiones at:a)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].].].origen:=origen +(100@0).self addMorph: reg.(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."cont:=cont+1. ].! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 21:33'!quienToca:cantJug|jug|jug := (juego getColCivilizaciones) detect:[:a| (a getMiTurno)].self inform: 'Turno del Jugador: ' , (jug getNombre) asString.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:02'!agregarBotones: cantJugbCerrar :=BotonAccion new.bMinimizar :=BotonAccion new.bCerrar color: Color red.bMinimizar color: Color blue.bCerrar position:(335@28).bMinimizar position:(325@28).bCerrar mouseAction:[self cerrar].bMinimizar  mouseAction:[self minimizar].bCerrar label: 'X'.bMinimizar label:'-'."Boton para pasar de turno"bPasarTurno := BotonAccion new.bPasarTurno color: Color blue.bPasarTurno position: (700@50).bPasarTurno label:'Pasar Turno'.bPasarTurno mouseAction: [ self pasarTurno]."Boton para saber de quien es el turno"bTocaTurno:= BotonAccion new.bTocaTurno color: Color black.bTocaTurno position:(700@80).bTocaTurno label:'Quien Toca?'.bTocaTurno mouseAction: [ self quienToca:cantJug].self addMorph: bTocaTurno."Boton para saber que turno es"bTurnoGlobal:= BotonAccion new.bTurnoGlobal color:Color red.bTurnoGlobal position:(700@100).bTurnoGlobal label:'¿que turno es?'.bTurnoGlobal mouseAction:[self turnoGlobal].self addMorph: bTurnoGlobal.self addMorph: bCerrar.self addMorph: bMinimizar.self addMorph: bPasarTurno.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:26'!agregarRegiones:cantJug|origen cont reg|origen:=self position.tamOrigin := origen.cont:=1.origen:=(50@50).[ cont<=6 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg position: origen.origen :=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant|(((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant)].].]."reg mouseAction:[reg pregunta]."self addMorph:reg.(juego getColRegiones at:cont) addDependent: reg.cont:=cont+1. ].origen:=(50@150).[ cont<=12 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].].reg agregarRegion: (juego getColRegiones at:cont).(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."self addMorph: reg.cont:=cont+1. ].origen:=(50@250).[ cont<=18 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@350).[ cont<=24 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.origen:=origen +(100@0).reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty:[(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].]."reg mouseAction:[reg pregunta]."(juego getColRegiones at:cont) addDependent: reg.self addMorph: reg.cont:=cont+1. ].origen:=(50@450).[ cont<=30 ]whileTrue:[ reg:=PRegion new.reg extent: (100@100).reg color: Color transparent .reg borderColor: Color black.reg position: origen.reg agregarRegion: (juego getColRegiones at:cont).((juego getColRegiones at:cont) getColUnidades) ifNotEmpty: [(1 to:cantJug) do:[:cant| (((juego getColCivilizaciones at:cant)getColRegiones at:1)==(juego getColRegiones at:cont)) ifTrue: [reg agregarCiv: (juego getColCivilizaciones at:cant) cual: cant. reg agregarNombre:(juego getColCivilizaciones at:cant).].].].origen:=origen +(100@0).self addMorph: reg.(juego getColRegiones at:cont) addDependent: reg."reg mouseAction:[reg pregunta]."cont:=cont+1. ].origen := tamOrigin.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fabio 8/23/2018 13:37'!cerrar"Cierra la ventana"^self delete.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 14:13'!minimizar"minimiza la ventana"^self collapse.! !!MapaVisual methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 20:16'!turnoGlobalself inform: 'Es el turno Nº: ' , (juego getTurnoGlobal) asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MapaVisual class	instanceVariableNames: 'bTurnoGlobal'!BorderedMorph subclass: #PRegion	instanceVariableNames: 'bColor regionActual bPreg civActual nombreMorp'	classVariableNames: ''	poolDictionaries: ''	category: 'POO-Prueba'!!PRegion commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 13:21'!desplazarUnidad|gui reply|gui := UIManager default.reply := gui textEntry:'¿que unidad desea desplazar?1-Soldado2-Soldado plus3-Tanque4-Camion5-Bombardero'.(reply = '1') ifTrue:[].(reply = '2') ifTrue:[].(reply = '3') ifTrue:[].(reply = '4') ifTrue:[].(reply = '5') ifTrue:[].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 12:08'!coorLimites|s|s:= ''.(regionActual getColRegLimitrofes) do:[:cadaLim| ((cadaLim getColEdificios )isEmpty) ifTrue: [ s:= 'la coordenada limite es: ' , (cadaLim getCoordenada) asString, String cr , s].].^s.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/29/2018 13:10'!agregarRegion:unaRegregionActual := unaReg.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/28/2018 21:42'!cerrar^self delete.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:23'!conquista|colRegParaConq gui coord|colRegParaConq := (civActual getColRegPorConquistar).gui := UIManager default.coord := (gui textEntry: 'ingrese la coordenada limitrofe que desea conquistar de' , String cr, self coorLimites).regionActual conquistaDesocupada:(coord asInteger) col: colRegParaConq.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/30/2018 21:55'!agregarCiv:unaCiv cual:numcivActual:= unaCiv.(num = 1) ifTrue:[self color: Color red.].(num = 2) ifTrue:[self color: Color blue].(num = 3) ifTrue:[self color: Color green].(num = 4) ifTrue:[self color: Color black].(num = 5) ifTrue:[self color: Color orange].(num = 6) ifTrue:[self color: Color yellow].(num = 7) ifTrue:[self color: Color purple].(num = 8) ifTrue:[self color: Color cyan].(num = 9) ifTrue:[self color: Color pink].(num = 10) ifTrue:[self color: Color brown].(num = 11) ifTrue:[self color: Color magenta].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 20:05'!update:unaReg(unaReg getColRegPorConquistar)ifNotEmpty:[self color: Color white].self changed.! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/2/2018 01:34'!construccion|gui reply dinerito|dinerito:= (civActual getDinero).gui := UIManager default.reply := gui textEntry: '¿que construccion desea realizar?1-casa2-escuela3-fabrica4-fabricaM5-aeropuerto'.(reply = '1') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'casa'. civActual disminuirDinero: 3].(reply = '2') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'escuelaM'. civActual disminuirDinero: 10].(reply = '3') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'fabrica' . civActual disminuirDinero: 20].(reply = '4') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'fabricaM' .civActual disminuirDinero: 25].(reply = '5') ifTrue: [ regionActual construirEdificios:  dinerito construccion:'aeropuerto' .civActual disminuirDinero: 30].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 8/31/2018 21:28'!agregarNombre:civiznombreMorp := BotonAccion new.nombreMorp position: (self position + (10@10)).nombreMorp label: (civiz getNombre).nombreMorp color:Color black.self addMorph: nombreMorp.nombreMorp mouseAction: [ self pregunta]! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 13:26'!crearUnidades|dinero gui reply|dinero := (civActual getDinero).gui := UIManager default.reply := gui textEntry:'¿que unidad desea crear?1-Soldado2-Soldado plus3-Tanque4-Camion5-Bombardero'.(reply = '1') ifTrue:[(regionActual comenzarEntrenamientoCiviles: civActual) ].(reply = '2') ifTrue:[(regionActual comenzarEntrenamientoSoldados: civActual)].(reply = '3') ifTrue:[(regionActual construirUnidades: dinero construccion:'tanque') ].(reply = '4') ifTrue:[(regionActual construirUnidades: dinero construccion:'camion') ].(reply = '5') ifTrue:[(regionActual construirUnidades: dinero construccion:'bombardero') ].! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/1/2018 21:24'!getCivActu^(civActual getNombre).! !!PRegion methodsFor: 'Metodos' stamp: 'Fede 9/3/2018 13:20'!pregunta |gui reply|(civActual getMiTurno)ifTrue:[gui := UIManager default.reply := gui textEntry:'¿que desea hacer?.1- construccion2- crear Unidades3- conquista4- Desplazar unidad5- ver unidades6- ver edificios7- conocer coordenada8- obtener coordenadas limitrofes'.							(reply = '1') ifTrue:[self  construccion].(reply = '2') ifTrue:[self crearUnidades].(reply = '3') ifTrue:[self conquista].(reply = '4') ifTrue:[self desplazarUnidad].(reply = '5') ifTrue:[reply inform: (regionActual getColUnidades) asString  ].(reply = '6') ifTrue: [reply inform: (regionActual getColEdificios) asString].(reply = '7') ifTrue: [reply  inform: ((regionActual getCoordenada) asString) ].(reply = '8') ifTrue:[reply inform: self coorLimites].(reply = '9') ifTrue: [ self inform: (civActual getColRegiones) asString ].(reply = '10') ifTrue: [ self inform: (civActual getDinero) asString ].]ifFalse:[self inform: 'no es tu turno'].! !!PRegion methodsFor: 'initialization' stamp: 'Fede 8/31/2018 21:28'!initializesuper initialize.! !